# .github/workflows/ui-tests-ci.yml

# Workflow 的名称，会显示在 GitHub Actions 的页面上
name: auto_BDD UI report

# 触发此 Workflow 的事件
on:
  # 1. Push 触发：当代码 push 到 main 或 develop 分支时触发
  push:
    branches: [ main, develop ]

  # 2. 定时触发：使用 CRON 表达式，此处设置为每天上午7点（UTC时间）
  # 注意：GitHub Actions 的定时器是基于 UTC 时间的。
  # '0 7 * * *' 对应北京时间下午3点。请根据需要调整。
  schedule:
    - cron: '0 7 * * *' # 每天 07:00 UTC 触发

  # 3. 手动触发：允许你在 Actions 页面上手动点击按钮来运行此 Workflow
  workflow_dispatch:

# 定义一系列的任务（Jobs）
jobs:
  # 定义一个名为 build-test-and-deploy-report 的任务
  build-test-and-deploy-report:
    # 指定任务运行的虚拟环境
    runs-on: ubuntu-latest

    # 为此任务授予权限，允许它将报告推送到 gh-pages 分支
    permissions:
      contents: write

    # 定义任务的执行步骤（Steps）
    steps:
      # 第1步：检出代码
      # 使用官方的 checkout action 来获取你的仓库代码
      - name:  checkout repository
        uses: actions/checkout@v4

      # 第2步：设置 Python 环境
      # 使用官方的 setup-python action
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13' # 指定你项目所需的 Python 版本

      # 第3步：安装项目依赖
      # 从 requirements.txt 文件安装所有库
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # 第4步：执行 Pytest 测试并生成 Allure 结果
      # --alluredir 参数指定了 Allure 原始报告文件的输出目录
      - name: Run UI Tests with Pytest
        run: pytest --alluredir=./allure-results

      # 第5步：生成 Allure 报告并部署到 GitHub Pages
      # 使用社区维护的优秀 action，它会自动处理报告生成和部署
      - name: Generate and Deploy Allure Report
        uses: allure-framework/allure-report-action@v1
        with:
          # 指定 Allure 原始结果所在的目录
          report_dir: allure-results
          # （可选）指定 GitHub Token，通常不需要手动设置
          # github_token: ${{ secrets.GITHUB_TOKEN }}
